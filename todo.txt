=====================
==== TOP OF MIND ====
=====================

[~] Figure out the story for reflecting RenderComponent
    [X] Reflect mesh name in UI
    [X] Can set the component visible/invisible
    [X] Can remove the render component(s) for a mesh for an entity
        [ ] Remove/unload(?) it from resource manager if nothing else uses it (ref count?)
    [X] Add render component(s) for a mesh for an entity
        [X] Devise a way to list all known obj files and let user select one
           [X] Text box to filter!
        [X] Add it to resource manager if it isn't already
        [ ] Load it async and maybe spin a wheel for better "loading" feedback?

======================
==== MID PRIOIRTY ====
======================

[~] Change component ComponentGroup parameters to pointers (i.e., in aabbFromRenderComponents)
[ ] Add quickhull implementation
    [ ] Change ColliderComponent to PrimitiveColliderComponent and add ConvexHullColliderComponent
    [ ] Render the result using DebugDraw drawLine

[ ] Port GJK/EPA code
[ ] Collision when walking

======================
==== LOW PRIORITY ====
======================

    
    - Note: maybe the RenderComponent just has a reference to the mesh id?

===============
==== MAYBE ====
===============

[ ] Some way to ensure that we are iterating over every component type that can be in an entity (needed for UI, serialization, deleting an entity, etc.)
[ ] Consider making a global Game* instead of passing the Game* around everywhere
[ ] Split between engine and game-specific stuff (like portal)
[ ] Find a better spot to put the getEntity stuff... I'd rather not have every file require to include "Game.h"
